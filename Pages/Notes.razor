@page "/notes"
@using NotesApp.Models
@using NotesApp.Services
@inject INoteService NoteService

<PageTitle>My Notes</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">My Notes</h1>

    <!-- Create New Note Section -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Create New Note</h5>
            <EditForm Model="@newNote" OnValidSubmit="@CreateNote">
                <div class="mb-3">
                    <label class="form-label">Title</label>
                    <InputText class="form-control" @bind-Value="newNote.Title" placeholder="Enter note title" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Content</label>
                    <InputTextArea class="form-control" @bind-Value="newNote.Content" rows="3" placeholder="Enter note content" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Priority</label>
                    <InputSelect class="form-select" @bind-Value="newNote.Priority">
                        <option value="@Priority.Low">Low</option>
                        <option value="@Priority.Medium">Medium</option>
                        <option value="@Priority.High">High</option>
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Add Note</button>
            </EditForm>
        </div>
    </div>

    <!-- Notes List -->
    <div class="row">
        @if (notes == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!notes.Any())
        {
            <p>No notes yet. Create your first note above!</p>
        }
        else
        {
            @foreach (var note in notes)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100 @GetPriorityColorClass(note.Priority)">
                        <div class="card-body">
                            @if (editingNoteId == note.Id)
                            {
                                <!-- Edit Mode -->
                                <EditForm Model="@editingNote" OnValidSubmit="@SaveNote">
                                    <div class="mb-2">
                                        <InputText class="form-control" @bind-Value="editingNote!.Title" />
                                    </div>
                                    <div class="mb-2">
                                        <InputTextArea class="form-control" @bind-Value="editingNote!.Content" rows="4" />
                                    </div>
                                    <div class="mb-2">
                                        <InputSelect class="form-select form-select-sm" @bind-Value="editingNote!.Priority">
                                            <option value="@Priority.Low">Low</option>
                                            <option value="@Priority.Medium">Medium</option>
                                            <option value="@Priority.High">High</option>
                                        </InputSelect>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-sm btn-success">Save</button>
                                        <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                    </div>
                                </EditForm>
                            }
                            else
                            {
                                <!-- View Mode -->
                                <h5 class="card-title">@note.Title</h5>
                                <p class="card-text">@note.Content</p>
                                <div class="text-muted small mb-2">
                                    <div>Created: @note.CreatedDate.ToString("MMM dd, yyyy")</div>
                                    @if (note.LastModifiedDate.HasValue)
                                    {
                                        <div>Modified: @note.LastModifiedDate.Value.ToString("MMM dd, yyyy")</div>
                                    }
                                </div>
                                <span class="badge bg-secondary">@note.Priority</span>
                                <div class="mt-3 d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEdit(note)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteNote(note.Id)">Delete</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Note>? notes;
    private Note newNote = new();
    private Note? editingNote;
    private int? editingNoteId;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
    }

    private async Task LoadNotes()
    {
        notes = await NoteService.GetAllNotesAsync();
    }

    private async Task CreateNote()
    {
        if (!string.IsNullOrWhiteSpace(newNote.Title) && !string.IsNullOrWhiteSpace(newNote.Content))
        {
            await NoteService.CreateNoteAsync(newNote);
            newNote = new Note(); // Reset form
            await LoadNotes();
        }
    }

    private void StartEdit(Note note)
    {
        editingNoteId = note.Id;
        editingNote = new Note
        {
            Id = note.Id,
            Title = note.Title,
            Content = note.Content,
            Priority = note.Priority,
            CreatedDate = note.CreatedDate,
            LastModifiedDate = note.LastModifiedDate
        };
    }

    private async Task SaveNote()
    {
        if (editingNote != null)
        {
            await NoteService.UpdateNoteAsync(editingNote);
            editingNoteId = null;
            editingNote = null;
            await LoadNotes();
        }
    }

    private void CancelEdit()
    {
        editingNoteId = null;
        editingNote = null;
    }

    private async Task DeleteNote(int id)
    {
        await NoteService.DeleteNoteAsync(id);
        await LoadNotes();
    }

    private string GetPriorityColorClass(Priority priority)
    {
        return priority switch
        {
            Priority.High => "border-danger border-3",
            Priority.Medium => "border-warning border-3",
            Priority.Low => "border-success border-3",
            _ => ""
        };
    }
}